View(input)
model_cppls <- fit(y ~ input, model = "cppls")
model_mlp <- fit(y ~ input, model = "mlp")
predict(model_cppls, data.frame(y=NA, input=inputtest), task == "reg")
inputtest[1,]
a <- inputtest[,1]
predict(model_cppls, data.frame(x1=inputtest[,1], x2=inputtest[,2], x3=inputtest[,3], x4=inputtest[,4], x5=inputtest[,5], y=NA))
View(input)
model_cppls <- fit(G3 ~ studytime + school + sex + I(age^2) + I(absences^2), data = Math, model = "cppls")
predict(model_cppls, data.frame(x1=inputtest[,1], x2=inputtest[,2], x3=inputtest[,3], x4=inputtest[,4], x5=inputtest[,5], y=NA))
model_cppls <- fit(G3 ~ studytime + school + sex + I(age^2) + I(absences^2), data = Math, model = "cppls")
predict(model_cppls, data.frame(studytime=inputtest[,1], school=inputtest[,2], sex=inputtest[,3], I(age^2)=inputtest[,4], I(absences^2)=inputtest[,5], G3=NA))
predict(model_cppls, data.frame(studytime=inputtest[,1], school=inputtest[,2], sex=inputtest[,3], I(age^2) = inputtest[,4], I(absences^2)=inputtest[,5], G3=NA))
predict(model_cppls, data.frame(studytime=inputtest[,1], school=inputtest[,2], sex=inputtest[,3], x4= inputtest[,4], I(absences^2)=inputtest[,5], G3=NA))
predict(model_cppls, data.frame(studytime=inputtest[,1], school=inputtest[,2], sex=inputtest[,3], x4= inputtest[,4], x5=inputtest[,5], G3=NA))
predict(model_cppls, data.frame(inputtest))
inputtest <- model.matrix(G3 ~ studytime + school + sex + I(age^2) + I(absences^2), data = Language)[ , -1]
inputtest <- data.frame(input = inputtest)
y <- Math$G3
stopifnot(require(rminer))
model_cppls <- fit(y ~ input, model = "cppls")
model_mlp <- fit(y ~ input, model = "mlp")
predict(model_cppls, data.frame(inputtest))
data(sa_ssin)
View(sa_ssin)
predict(model_cppls, data.frame(input = inputtest))
input <- model.matrix(G3 ~ studytime + school + sex + I(age^2) + I(absences^2), data = Math)[, -1]
inputtest <- model.matrix(G3 ~ studytime + school + sex + I(age^2) + I(absences^2), data = Language)[ , -1]
class(Math)
y <- Math$G3
stopifnot(require(rminer))
model_cppls <- fit(y ~ input, model = "cppls")
model_mlp <- fit(y ~ input, model = "mlp")
predict(model_cppls, data.frame(input = inputtest))
predict(model_cppls, data.frame(input = inputtest, y = NA))
predict(model_cppls, data.frame(input = inputtest, y = rep(NA,649)))
input <- inputtest
predict(model_cppls, data.frame(input, y = rep(NA,649)))
predict(model_cppls, data.frame(input, y = NA))
View(input)
input <- model.matrix(G3 ~ studytime + school + sex + I(age^2) + I(absences^2), data = Math)[, -1]
inputtest <- model.matrix(G3 ~ studytime + school + sex + I(age^2) + I(absences^2), data = Language)[ , -1]
y <- Math$G3
stopifnot(require(rminer))
model_cppls <- fit(y ~ input, model = "cppls")
model_mlp <- fit(y ~ input, model = "mlp")
input <- inputtest
y_test_cppls <- predict(model_cppls, data.frame(input, y = NA))
y_tset_mlp <- predict(model_mlp, data.frame(input, y = NA))
y_test_cppls <- predict(model_cppls, data.frame(input, y = NA))
y_tset_mlp <- predict(model_mlp, data.frame(input, y = NA))
mse_cppls <- mean((y_test_cppls - Language$G3) ^ 2)
mse_mlp <- mean((y_tset_mlp - Language$G3) ^ 2)
cbind(mse_cppls, y_tset_mlp)
cbind(mse_cppls, mse_mlp)
Math <- read.csv("https://courseworks.columbia.edu/x/ir2NNs", sep = ";")
Language <- read.csv("https://courseworks.columbia.edu/x/iX6mmf", sep = ";")
input <- model.matrix(G3 ~ studytime + school + sex + I(age^2) + I(absences^2), data = Math)[, -1]
inputtest <- model.matrix(G3 ~ studytime + school + sex + I(age^2) + I(absences^2), data = Language)[ , -1]
y <- Math$G3
stopifnot(require(rminer))
model_cppls <- fit(y ~ input, model = "cppls")
model_mlp <- fit(y ~ input, model = "mlp")
input <- inputtest
y_test_cppls <- predict(model_cppls, data.frame(input, y = NA))
y_tset_mlp <- predict(model_mlp, data.frame(input, y = NA))
mse_cppls <- mean((y_test_cppls - Language$G3) ^ 2)
mse_mlp <- mean((y_tset_mlp - Language$G3) ^ 2)
cbind(mse_cppls, mse_mlp)
stopifnot(require(ISLR))
data("Caravan", package = "ISLR")
str(Caravan)
testing <- Caravan[1:1000, ]
training <- Caravan[1001:nrow(Caravan), ]
stopifnot(require(bartMachine))
View(training)
a <- training[ ,-86]
View(a)
View(Caravan)
bart <- bartMachine(training[ ,-86], training$Purchase, mem_cache_for_speed = FALSE)
bart_predict <- predict(bart, newdata = testing[ ,-86])
bart_predict <- predict(bart, new_data = testing[ ,-86])
table(bart_predict)
nrow(bart_predict)
nrow(data.frame(bart_predict))
bart_predict[1]
bart_predict[1000]
for (i in 1:1000) {
if (bart_predict[i] >= 0.5) {
bart_predict[i] <- 1
}
else {
bart_predict[i] <- 0
}
}
table(bart_predict)
View(testing)
table(bart_predict, testing$Purchase)
table(testing$Purchase, bart_predict)
a <- table(testing$Purchase, bart_predict)
class(a)
a[1]
a[2]
a[3]
a[4]
a[5]
a[1,1]
a[1,2]
table_bart <- table(testing$Purchase, bart_predict)
pcp_bart <- table_bart[1]/1000
pcp_bart
Fit <- fit(Purchase ~ ., data = training, model = "mlp")
Fit_predict <- predict(Fit, newdata = testing)
View(Fit_predict)
View(Fit_predict)
for (i in 1:1000) {
if (Fit_predict[i, 1] > Fit_predict[i, 2]) {
Fit_predict$y_hat[i] <- 0
}
else {
Fit_predict$y_hat[i] <- 1
}
}
Fit_predict$y_hat <- NA
Fit_predict <- predict(Fit, newdata = testing)
class(Fit_predict)
Fit_predict <- data.frame(predict(Fit, newdata = testing))
View(Fit_predict)
Fit_predict$y_hat <- NA
View(Fit_predict)
Fit_predict <- data.frame(predict(Fit, newdata = testing))
for (i in 1:1000) {
if (Fit_predict[i, 1] > Fit_predict[i, 2]) {
Fit_predict$y_hat[i] <- 0
}
else {
Fit_predict$y_hat[i] <- 1
}
}
View(Fit_predict)
table_bart <- table(testing$Purchase, Fit_predict$y_hat)
table_bart
table_Fit <- table(testing$Purchase, Fit_predict$y_hat)
table_Fit <- table(testing$Purchase, Fit_predict$y_hat)
table_Fit
pcp_Fit <- (table_Fit[1, 1] + table_Fit[2, 2])/1000
pcp_Fit
cbind(pcp_bart, pcp_Fit)
stopifnot(require(pcaPP))
pr_out <- PCAproj(X_q3, k = 2, scale = sd)
names(pr_out)
pr_out$center
pr_out$scale
pr_out$loadings
colSums(pr_out$loadings^2)
dim(pr_out$scores)
par(mar = c(5,4,3,3) + .1, las = 1, cex = 0.8)
rownames(pr_out$scores) <- rownames(X_q3)
biplot(pr_out, scale = 0)
n <- nrow(X_q3)
labels <- 1:n
labels[-outliers] <- "."
install.packages("DMwR")
stopifnot(require(DMwR))
View(X_q3)
stopifnot(require(DMwR))
outlier.scores <- lofactor(X_q3, k=5)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
n <- nrow(X_q3)
labels <- 1:n
labels[-outliers] <- "."
biplot(pr_out, scale = 0, xlabs=labels)
biplot(pr_out, scale = 0)
outlier.scores
order(outlier.scores, decreasing=T)
stopifnot(require(DMwR))
outlier.scores <- lofactor(X_q3, k=10)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
stopifnot(require(DMwR))
outlier.scores <- lofactor(X_q3, k=c(5,10))
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
outlier.scores <- lofactor(X_q3, k=10)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
n <- nrow(X_q3)
labels <- 1:n
labels[-outliers] <- "."
biplot(pr_out, scale = 0, xlabs=labels)
stopifnot(require(DMwR))
outlier.scores <- lofactor(X_q3, k=3)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
stopifnot(require(DMwR))
outlier.scores <- lofactor(X_q3, k=2)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
stopifnot(require(DMwR))
outlier.scores <- lofactor(X_q3, k=5)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
stopifnot(require(DMwR))
outlier.scores <- lofactor(X_q3, k=5)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
n <- nrow(X_q3)
labels <- 1:n
labels[-outliers] <- "."
biplot(pr_out, scale = 0, xlabs=labels)
outliers <- order(outlier.scores, decreasing=T)[1:3]
outliers
outlier.scores <- lofactor(X_q3, k=3)
outliers <- order(outlier.scores, decreasing=T)[1:3]
outliers
outlier.scores <- lofactor(X_q3, k=5)
outliers <- order(outlier.scores, decreasing=T)[1:3]
outliers
n <- nrow(X_q3)
labels <- 1:n
labels[-outliers] <- "."
biplot(pr_out, scale = 0, xlabs=labels)
outliers <- order(outlier.scores, decreasing=T)[1:4]
outliers
stopifnot(require(DMwR))
outlier.scores <- lofactor(X_q3, k=5)
outliers <- order(outlier.scores, decreasing=T)[1:5]
outliers
n <- nrow(X_q3)
labels <- 1:n
labels[-outliers] <- "."
biplot(pr_out, scale = 0, xlabs=labels)
a <- diag(x = -1, 0.5, 0.5, 0.25, 0, 0.25)
a <- matrix(-1,0,0,0,0,0, 0,0.5,0,0,0,0, 0,0,0.5,0,0,0, 0,0,0,0.125,0,0, 0,0,0,0.125,0,0, 0,0,0,0,0,0.25, nrow = 6, ncol = 6, byrow = TRUE)
a <- matrix(c(-1,0,0,0,0,0, 0,0.5,0,0,0,0, 0,0,0.5,0,0,0, 0,0,0,0.125,0,0, 0,0,0,0.125,0,0, 0,0,0,0,0,0.25), nrow = 6, ncol = 6, byrow = TRUE)
View(a)
r <- eigen(a)
r
a^3
eigen(a^3)
1/2 * 1/2 + 1/3 * 2/3
1/4 +2/9
1/2 * 1/2 + 1/3 * 2/3 + 1/4 * 3/4 + 1/5 * 4/5 + 1/6 * 5/6 + 1/7 * 6/7 + 1/8 * 7/8 + 1/9 * 8/9 + 1/10 * 9/10 + (1+1/2+1/3+1/4+1/5+1/6+1/7+1/8+1/9+1/10)^2
log(10) + (log(10))^2
View(a)
A <- matrix(c(1,0,0,0,0,0, 0,1/sqrt(2),1/sqrt(2),0,0,0, 0,1/sqrt(2),-1/sqrt(2),0,0,0, 0,0,0,1/sqrt(2),1/sqrt(2),0, 0,0,0,1/sqrt(2),-1/sqrt(2),0, 0,0,0,0,0,1), nrow = 6, ncol = 6)
View(A)
B <- matrix(c(-1,0,0,0,0,0, 0,1/2,0,0,0,0, 0,0,1/2,0,0,0, 0,0,0,1/4,0,0, 0,0,0,0,0,0, 0,0,0,0,0,1/4), nrow = 6, ncol = 6)
View(B)
C <- A %*% B %*% A
View(C)
eigen(C)
View(C)
eigen(C^3)
fun1 <- function (n) {
sum1 <- 0
sum2 <- 0
for (i in 1:n) {
sum1 <- sum1 + 1/i * (1 - 1/i)
sum2 <- sum2 + 1/i
}
sum <- sum1 + sum2^2
return(sum)
}
fun1(10)
library(dplyr)
library(data.table)
install.packages("shiny")
library(shiny)
library(dplyr)
library(data.table)
install.packages("shiny")
library(shiny)
library(dplyr)
library(data.table)
install.packages("shiny")
library(shiny)
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR()
nf <- layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,1,2,2,3,3), 3, 4, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,1,1,2,2,3,3,), 3, 4, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,1,1,2,2,3,3), 3, 4, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
a <- layout(matrix(c(1,1,1,1,2,2,3,3,2,2,3,3), 3, 4, byrow=T))
layout.show(a)
theta <- as.data.frame(seq(0, 1, 0.001))
BI <- function(theta, y, n) {
prior <- function(x) {
if(x >= 0 & x < 0.385) {
return(0.5)
}
else if(x >= 0.385 & x < 0.485) {
return(45 * x - 16.825)
}
else if(x >= 0.485 & x < 0.585) {
return(-45 * x + 26.825)
}
else if(x >= 0.585 & x <= 1) {
return(0.5)
}
}
Ptheta <- as.data.frame(apply(theta, MARGIN = 1, FUN = prior))
likelihood <- as.data.frame(apply(theta, MARGIN = 1, FUN = function(x){choose(n, y) * x^y * (1-x)^(n-y)}))
posterior <- Ptheta * likelihood
return(posterior)
}
posterior <- BI(theta, 437, 980)
plot(cbind(theta, posterior), type = "l", xlab = "Theta", ylab = "density")
title("posterior density")
library(shape)
library(reshape)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='yusenwang', token='2BB7D81B2A308C33DEAC47672886D800', secret='JQoK44zWIWzFmUp0Wzc6Ku1yOYdHTS8Ta2uDVYWq')
install.packages('shiny')
library(shiny)
library(ggplot2)
install.packages(c("BH", "car", "caret", "class", "curl", "DEoptimR", "effects", "GGally", "HH", "Hmisc", "httr", "jsonlite", "kernlab", "knitr", "latticeExtra", "lubridate", "MASS", "Matrix", "memoise", "mgcv", "multcomp", "mvtnorm", "nlme", "nnet", "plotrix", "R6", "Rcpp", "RcppArmadillo", "RcppDE", "RcppEigen", "rgl", "rJava", "rmarkdown", "Rmpfr", "robCompositions", "seriation", "sgeostat", "sp", "spatial", "stringi", "TH.data", "tidyr", "tree", "xtable"))
# 08-reactiveValues
library(shiny)
ui <- fluidPage(
actionButton(inputId = "norm", label = "Normal"),
actionButton(inputId = "unif", label = "Uniform"),
plotOutput("hist")
)
server <- function(input, output) {
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, { rv$data <- rnorm(100) })
observeEvent(input$unif, { rv$data <- runif(100) })
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
names(tag())
names(tags)
?tags
library(maps)
library(mapdata)
install.packages("mapdata")
library(mapdata)
map()
map("usa")
map("state", region="new york")
map('world', regions = 'australia')
map.axes()
data(unemp)
data(county.fips)
library(maptools)
install.packages("maptools")
library(scales)
library(googleVis)
demo(googleVis)
a <- 2
b <- 5
ab/((a+b)^2*(a+b+1))
(a*b)/((a+b)^2*(a+b+1))
plot(rbeta(1000, 2,5))
plot(c(1:1000),rbeta(1000, 2,5))
pl.beta <- function(a,b, asp = if(isLim) 1, ylim = if(isLim) c(0,1.1)) {
if(isLim <- a == 0 || b == 0 || a == Inf || b == Inf) {
eps <- 1e-10
x <- c(0, eps, (1:7)/16, 1/2+c(-eps,0,eps), (9:15)/16, 1-eps, 1)
} else {
x <- seq(0, 1, length = 1025)
}
fx <- cbind(dbeta(x, a,b), pbeta(x, a,b), qbeta(x, a,b))
f <- fx; f[fx == Inf] <- 1e100
matplot(x, f, ylab="", type="l", ylim=ylim, asp=asp,
main = sprintf("[dpq]beta(x, a=%g, b=%g)", a,b))
abline(0,1,     col="gray", lty=3)
abline(h = 0:1, col="gray", lty=3)
legend("top", paste0(c("d","p","q"), "beta(x, a,b)"),
col=1:3, lty=1:3, bty = "n")
invisible(cbind(x, fx))
}
pl.beta(3,1)
plot(c(1:1000),pbeta(1000, 2,5))
x <- seq(0, 1, length = 1025)
pbeta(x, 3,1)
a <- pbeta(x, 3,1)
plot(x,a)
a <- pbeta(x, 2,%)
a <- pbeta(x, 2,5)
plot(x,a)
a <- dbeta(x, 2,5)
plot(x,a)
a <- dbeta(x, 2,6)
plot(x,a)
a <- dbeta(x, 3,6)
plot(x,a)
a <- dbeta(x, 2,4)
plot(x,a)
a <- dbeta(x, 2,8)
plot(x,a)
pl.beta <- function(a,b, asp = if(isLim) 1, ylim = if(isLim) c(0,1.1)) {
if(isLim <- a == 0 || b == 0 || a == Inf || b == Inf) {
eps <- 1e-10
x <- c(0, eps, (1:7)/16, 1/2+c(-eps,0,eps), (9:15)/16, 1-eps, 1)
} else {
x <- seq(0, 1, length = 1025)
}
#fx <- cbind(dbeta(x, a,b), pbeta(x, a,b), qbeta(x, a,b))
fx <- dbeta(x, a,b)
f <- fx; f[fx == Inf] <- 1e100
matplot(x, f, ylab="", type="l", ylim=ylim, asp=asp,
main = sprintf("[dpq]beta(x, a=%g, b=%g)", a,b))
#abline(0,1,     col="gray", lty=3)
#abline(h = 0:1, col="gray", lty=3)
#legend("top", paste0(c("d","p","q"), "beta(x, a,b)"),
#col=1:3, lty=1:3, bty = "n")
invisible(cbind(x, fx))
}
pl.beta(3,1)
pl.beta(2,5)
pl.beta(2,8)
a <- dbeta(x, 2,8)
mean(a)
a <- pbeta(x, 2,8)
mean(a)
a <- prbeta(x, 2,8)
a <- rbeta(x, 2,8)
mean(a)
var(a)
sd(a)
median(a)
a <- rbeta(x, 2,7)
mean(a)
sd(a)
median(a)
mode(a)
mu_t <- 1.173 + (0.20 / sqrt(36)) * rt(1000, 35)
mu_c <- 1.013 + (0.24 / sqrt(32)) * rt(1000, 31)
diff <- mu_c - mu_t
hist (diff, xlab="mu_t - mu_c", yaxt="n", breaks=seq(-.1,.4,.02), cex=2)
hist(diff, xlab="mu_t - mu_c", yaxt="n", breaks=seq(-.1,.4,.02), cex=2)
hist(diff, xlab = "mu_t - mu_c", yaxt="n", breaks=seq(-.1,.4,.02), cex=2)
hist(diff, xlab = "mu_t - mu_c")
print (sort(dif)[c(25,976)])
print (sort(diff)[c(25,976)])
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-.1, .4, .02))
diff <- mu_t - mu_c
hist(diff, xlab = "mu_t - mu_c")
hist(diff, xlab = "mu_t - mu_c", breaks = 20)
hist(diff, xlab = "mu_t - mu_c", breaks = 25)
seq(-0.1, 0.4, 0.02)
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.1, 0.4, 0.02))
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.05, 0.35, 0.02))
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.1, 0.4, 0.02))
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.1, 0.4, 0.02), main = "Histogram")
quantile(diff, probs = seq(0.025, 0.975)
)
quantile(diff, probs = seq(0.025, 0.975))
quantile(diff, probs = c(0.025, 0.975))
mu_c <- 1.013 + (0.24 / sqrt(32)) * rt(1000, 31)
mu_t <- 1.173 + (0.20 / sqrt(36)) * rt(1000, 35)
diff <- mu_t - mu_c
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.1, 0.4, 0.02), main = "Histogram")
quantile(diff, probs = c(0.025, 0.975))
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.1, 0.4, 0.05), main = "Histogram")
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.1, 0.4, 0.01), main = "Histogram")
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.1, 0.4, 0.02), main = "Histogram")
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.1, 0.4, 0.01), main = "Histogram")
quantile(diff, probs = c(0.025, 0.975))
set.seed(1)
mu_c <- 1.013 + (0.24 / sqrt(32)) * rt(1000, 31)
mu_t <- 1.173 + (0.20 / sqrt(36)) * rt(1000, 35)
diff <- mu_t - mu_c
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.1, 0.4, 0.01), main = "Histogram")
quantile(diff, probs = c(0.025, 0.975))
quantile(diff, probs = c(0.025, 0.975))
set.seed(1)
mu_c <- 1.013 + (0.24 / sqrt(32)) * rt(1000, 31)
mu_t <- 1.173 + (0.20 / sqrt(36)) * rt(1000, 35)
diff <- mu_t - mu_c
hist(diff, xlab = "mu_t - mu_c", breaks = seq(-0.1, 0.4, 0.01), main = "Histogram")
quantile(diff, probs = c(0.025, 0.975))
y <- c(16/(16+58), 9/(9+90))
y <- c(16/(16+58), 9/(9+90), 10/(10+48), 13/(13+57), 19/(19+103), 20/(20+57), 18/(18+86), 17/(17+112), 35/(35+273), 55/(55+64))
z <- c(12/(12+113), 1/(1+18), 2/(2+14), 4/(4+44), 9/(9+208), 7/(7+67), 9/(9+29), 8/(8+154))
mean(y)
var(y)
mean(z)
var(z)
M1 <- mean(y)
var1 <- var(y)
M2 <- mean(z)
var2 <- var(z)
alpha1 <- (M1^2 * (1-M1) - var1 * M1) / var1
beta1 <- (1-M1)*alpha1/M1
alpha2 <- (M2^2 * (1-M2) - var2 * M2) / var2
beta2 <- (1-M2)*alpha2/M2
shiny::runApp('Desktop/森哥文档（硕士）/2nd semester/ADS/project 2/Restroom and Crime')
runApp('Desktop/森哥文档（硕士）/2nd semester/ADS/project 2/Restroom and Crime')
setwd("~/Desktop/森哥文档（硕士）/2nd semester/ADS/project 2/Restroom and Crime")
runApp()
