{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(leaflet)\nlibrary(RColorBrewer)\nlibrary(scales)\nlibrary(lattice)\nlibrary(dplyr)\n\ndraw <- vc\n\nshinyServer(function(input, output, session) {\n  \n## Interactive Map ###########################################\n  \n  # Create the map\n  output$map <- renderLeaflet({\n    leaflet() %>%\n      addTiles(\n        urlTemplate = \"https://api.mapbox.com/v4/mapbox.emerald/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZnJhcG9sZW9uIiwiYSI6ImNpa3Q0cXB5bTAwMXh2Zm0zczY1YTNkd2IifQ.rjnjTyXhXymaeYG6r2pclQ\"\n        #urlTemplate = \"//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png\",\n        #attribution = 'Maps by <a href=\"http://www.mapbox.com/\">Mapbox</a>'\n      ) %>%\n      setView(lng = -73.97, lat = 40.75, zoom = 13)\n  })\n\n  # Choose just one vehicle\n  drawvalue <- reactive({if (input$vehicle == ''){return(vc)}else{\n      t <- filter(vc, VEHICLE.TYPE.CODE.1 == input$vehicle | VEHICLE.TYPE.CODE.2 == input$vehicle)\n      return(t)\n    }})\n \n  # This observer is responsible for maintaining the circles and legend,\n  # according to the variables the user has chosen to map to color and size.\n  observe({\n    \n    colorBy <- input$color\n    sizeBy <- input$size\n    draw <- drawvalue()\n\n    colorData <- draw[[colorBy]]\n    if (colorBy == \"NUMBER.OF.PERSONS.INJURED\"|colorBy == \"NUMBER.OF.PERSONS.KILLED\") {\n      pal <- colorBin(heat.colors(7), colorData, 7)} else{\n        pal <- colorFactor(\"Set1\", colorData)\n      }    \n        \n    radius <- draw[[sizeBy]] / 9 * 250 + 30\n    \n    if (input$cluster == TRUE){\n      leafletProxy(\"map\", data = draw) %>%\n        clearShapes() %>%\n        showGroup('Cluster') %>%\n        addCircles(~LONGITUDE, ~LATITUDE, radius=radius, group = \"Circle\",\n                   stroke=FALSE, fillOpacity=0.8, fillColor=pal(colorData)) %>%\n        addCircleMarkers(~LONGITUDE, ~LATITUDE, radius = 0, group = \"Cluster\",\n                         clusterOptions = markerClusterOptions())%>%\n        addLegend(\"bottomleft\", pal=pal, values=colorData, title=colorBy,\n                  layerId=\"colorLegend\")\n    }else{\n      leafletProxy(\"map\", data = draw) %>%\n        clearShapes() %>%\n        hideGroup('Cluster') %>%\n        addCircles(~LONGITUDE, ~LATITUDE, radius=radius, group = \"Circle\",\n                   stroke=FALSE, fillOpacity=0.8, fillColor=pal(colorData)) %>%\n        addLegend(\"bottomleft\", pal=pal, values=colorData, title=colorBy,\n                  layerId=\"colorLegend\")\n    }\n  })\n\n  # Show a popup at the given location\n  showvcPopup <- function(eventid, lat, lng) {\n    draw <- drawvalue()\n    selectedvc <- filter(draw, LATITUDE == lat, LONGITUDE == lng)\n    entry <- function(row){\n      result <- as.character(tagList(\n      tags$h6(row[2], row[3]), \n      tags$strong(HTML(sprintf(\"%s & %s\", row[9], row[10]))), tags$br(),\n      sprintf(\"Vehicles: %s & %s\", row[26], row[27]), tags$br(),\n      sprintf(\"Factors: %s & %s\", row[20], row[21]), tags$br(),\n      sprintf(\"%s Injuries & %s Deaths\", row[12], row[13]), tags$br()))\n      return(result)\n    }\n    content <- apply(selectedvc, 1, entry)\n    content <- paste0(content, collapse = \"\\n\")\n    leafletProxy(\"map\") %>% addPopups(lng, lat, content, layerId = eventid)\n  }\n\n  # When map is clicked, show a popup with city info\n  observe({\n    leafletProxy(\"map\") %>% clearPopups()\n    event <- input$map_shape_click\n    if (is.null(event))\n      return()\n\n    isolate({\n      showvcPopup(event$id, event$lat, event$lng)\n    })\n  })\n\n## See Your Neighbourhood ###########################################\n\n  observe({\n    zipcodes <- if (is.null(input$boroughs)) character(0) else {\n      filter(cleantable, Borough %in% input$boroughs) %>%\n        `$`('Zipcode') %>%\n        unique() %>%\n        sort()\n    }\n    stillSelected <- isolate(input$zipcodes[input$zipcodes %in% zipcodes])\n    updateSelectInput(session, \"zipcodes\", choices = zipcodes,\n      selected = stillSelected)\n  })\n  \n  # When actions is clicked, call popup function for the corresponding latitude and longitude\n  observe({\n    if (is.null(input$goto))\n      return()\n    isolate({\n      map <- leafletProxy(\"map\")\n      map %>% clearPopups()\n      dist <- 0.02\n      zip <- input$goto$zip\n      lat <- input$goto$lat\n      lng <- input$goto$lng\n      showvcPopup(zip, lat, lng)\n      map %>% fitBounds(lng - dist, lat - dist, lng + dist, lat + dist)\n    })\n  })\n\n  output$vctable <- DT::renderDataTable({\n    df <- cleantable %>%\n      filter(\n        is.null(input$boroughs) | Borough %in% input$boroughs,\n        is.null(input$zipcodes) | Zipcode %in% input$zipcodes\n      ) %>%\n       mutate(Action = paste('<a class=\"go-map\" href=\"\" data-lat=\"', Lat, '\" data-long=\"', Long, '\" data-zip=\"', Borough, '\"><i class=\"fa fa-crosshairs\"></i></a>', sep=\"\"))\n     action <- DT::dataTableAjax(session, df)\n    \n    DT::datatable(df, options = list(ajax = list(url = action)), escape = FALSE)\n  })\n\n## Most Dangerous Intersections ###########################\n\n  output$toptable <- DT::renderDataTable({\n    df <- read.csv('data/Most_Dangerous_Intersections.csv') %>%\n      mutate(Action = paste('<a class=\"go-map\" href=\"\" data-lat=\"', Lat, '\" data-long=\"', Long, '\" data-zip=\"', Borough, '\"><i class=\"fa fa-crosshairs\"></i></a>', sep=\"\"))\n    action <- DT::dataTableAjax(session, df)\n\n    DT::datatable(df, options = list(ajax = list(url = action)), escape = FALSE)\n  })\n\n})\n",
    "created" : 1455893037186.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3066489221",
    "id" : "EA46C3AA",
    "lastKnownWriteTime" : 1455948030,
    "last_content_update" : 1455948030601,
    "path" : "~/Desktop/森哥文档（硕士）/2nd semester/ADS/project 2/Collisions/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}